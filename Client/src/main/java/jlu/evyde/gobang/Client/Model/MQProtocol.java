package jlu.evyde.gobang.Client.Model;

import java.awt.*;
import java.awt.geom.Dimension2D;
import java.io.Serializable;
import java.util.ResourceBundle;

public class MQProtocol {
    private static final ResourceBundle bundle = ResourceBundle.getBundle("MQProtocol");
    public enum Head {
        PRODUCE,
        CONSUME,
        REGISTER,
        END;

        public static String constructRequest(Head mp, MQMessage msg) {
            if (mp != END) {
                return mp + "\n" + msg.toJson() + "\n" + END + "\n";
            }
            return "";
        }
    }

    public enum Status {
        SUCCESS,
        FAILED,
        UNKNOWN;
    }

    public enum Code {
        UPDATE_TOKEN(100),
        ;
        private final Integer code;

        Code(Integer c) {
            this.code = 200;
        }

        public Integer getCode() {
            return code;
        }
    }

    public enum MQSource {
        UI {
            @Override
            public boolean consume(MQSource ms) {
                return ms == MQSource.LOGIC || ms == MQSource.UI;
            }
        },
        CLIENT {
            @Override
            public boolean consume(MQSource ms) {
                return ms == MQSource.SERVER;
            }
        },
        SERVER {
            @Override
            public boolean consume(MQSource ms) {
                return ms == MQSource.CLIENT;
            }
        },
        LOGIC {
            @Override
            public boolean consume(MQSource ms) {
                return ms == MQSource.UI;
            }
        },
        ;
        public abstract boolean consume(MQSource ms);

        @Override
        public String toString() {
            return bundle.getString(this.name());
        }
    }

    public static class Chess implements Serializable {
        private final Point position;
        private final Color color;

        public enum Color {
            WHITE,
            BLACK;

            @Override
            public String toString() {
                return bundle.getString(this.name());
            }
        }

        public Chess(Point position, Color color) {
            this.position = position;
            this.color = color;
        }

        @Override
        public String toString() {
            return color.toString() + " [" + position.getX() + ", " + position.getY() + "]";
        }

        // Below is generated by IntelliJ IDEA
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Chess chess)) return false;

            if (!getPosition().equals(chess.getPosition())) return false;
            return color == chess.color;
        }

        @Override
        public int hashCode() {
            int result = getPosition().hashCode();
            result = 31 * result + color.hashCode();
            return result;
        }

        public Point getPosition() {
            return position;
        }
    }
}
